stages:
  - build
  - test
  - release
  - deploy

variables:
  # GKE info
  CLUSTER_NAME: cluster-6
  ZONE: us-central1-c	
  PROJECT: docker-266108
  DOMAIN_NAME:  sds80.dns-cloud.net# application domain name

  CHART_PATH: ./charts/ui
  CONTAINER_IMAGE: sds80/ui
  CONTAINER_IMAGE_BUILT: ${CONTAINER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}
  CONTAINER_IMAGE_LATEST: ${CONTAINER_IMAGE}:latest
  CI_REGISTRY: index.docker.io  # container registry URL
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375  # required since we use dind
#  SERVICE_ACCOUNT: /etc/deploy/sa.json
  STAGE_NAMESPACE: raddit-stage
  PROD_NAMESPACE: raddit-prod
  STAGE_RELEASE_NAME: raddit-stage-ui
  PROD_RELEASE_NAME: raddit-prod-ui

# build container image
build:
  stage: build
#  image: docker:latest
  image: docker:18.09
  services:
  #- docker:dind
  - docker:18.09-dind
  script:
    - echo "Building Dockerfile-based application..."
    - docker build -t ${CONTAINER_IMAGE_BUILT} .
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
    - echo "Pushing to the Container Registry..."
    - docker push ${CONTAINER_IMAGE_BUILT}

# run tests against built image
test:
  stage: test
  script:
    - exit 0

# tag container image that passed the tests successfully
# and push it to the registry
release:
  stage: release
  #image: docker:latest
  image: docker:18.09
  services:
  #- docker:dind
  - docker:18.09-dind
  script:
    - echo "Pulling docker image from Container Registry"
    - docker pull ${CONTAINER_IMAGE_BUILT}
    - echo "Logging to Container Registry at ${CI_REGISTRY}"
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
    - echo "Pushing to Container Registry..."
    - docker tag ${CONTAINER_IMAGE_BUILT} ${CONTAINER_IMAGE}:$(cat VERSION)
    - docker push ${CONTAINER_IMAGE}:$(cat VERSION)
    - docker tag ${CONTAINER_IMAGE}:$(cat VERSION) ${CONTAINER_IMAGE_LATEST}
    - docker push ${CONTAINER_IMAGE_LATEST}
    - echo ""
  only:
    - master

# deploy to staging environment
deploy_staging:
  stage: deploy
#  image: artemkin/helm-gke:1.0
  before_script:
#    - mkdir -p /etc/deploy
#    - echo ${service_account} | base64 -d > ${SERVICE_ACCOUNT}
#    - gcloud auth activate-service-account --key-file ${SERVICE_ACCOUNT}
#    - gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${ZONE} --project ${PROJECT}
#    - helm init --client-only

    - apt update
    - apt-get -y install wget curl apt-transport-https ca-certificates gnupg
    - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list    
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    - apt-get update && apt-get -y install google-cloud-sdk
    - apt-get -y install kubectl
    - gcloud auth activate-service-account --key-file ${service_account}
    - gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${ZONE} --project ${PROJECT}

    - wget https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz
    - tar xzvf helm-v3.1.2-linux-amd64.tar.gz
    - mv linux-amd64/helm /usr/local/bin/helm
    - gcloud auth list
    - kubectl version
    - helm version
#    namespace creation need only ones
#    - kubectl create namespace ${STAGE_NAMESPACE}
  script:
    - helm upgrade --install
      --set image.tag=$(cat VERSION)
      --set ingress.enabled=false
      --set image.repository=${CONTAINER_IMAGE}
      --wait
      --namespace=${STAGE_NAMESPACE}
       ${STAGE_RELEASE_NAME} ${CHART_PATH}
  environment:
    name: staging
  only:
  - master

# deploy to production environment (manual)
deploy_prod:
  stage: deploy
  # image: artemkin/helm-gke:1.0
  before_script:
  #   - mkdir -p /etc/deploy
  #   - echo ${service_account} | base64 -d > ${SERVICE_ACCOUNT}
  #   - gcloud auth activate-service-account --key-file ${SERVICE_ACCOUNT}
  #   - gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${ZONE} --project ${PROJECT}
  #   - helm init --client-only
    - apt update
    - apt-get -y install wget curl apt-transport-https ca-certificates gnupg
    - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list    
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    - apt-get update && apt-get -y install google-cloud-sdk
    - apt-get -y install kubectl
    - gcloud auth activate-service-account --key-file ${service_account}
    - gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${ZONE} --project ${PROJECT}

    - wget https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz
    - tar xzvf helm-v3.1.2-linux-amd64.tar.gz
    - mv linux-amd64/helm /usr/local/bin/helm

  # script:
  #   - helm upgrade --install
  #     --set image.tag=$(cat VERSION)
  #     --set image.repository=${CONTAINER_IMAGE}
  #     --set ingress.hosts[0]=${DOMAIN_NAME}
  #     --set ingress.tls[0].secretName=ui-tls,ingress.tls[0].hosts={${DOMAIN_NAME}}
  #     --wait
  #     --namespace=${PROD_NAMESPACE}
  #     ${PROD_RELEASE_NAME} ${CHART_PATH}
  script:
    - helm upgrade ${PROD_RELEASE_NAME} ${CHART_PATH}
      --install
      --set image.tag=$(cat VERSION)
      --set image.repository=${CONTAINER_IMAGE}
      --wait
      --namespace=${PROD_NAMESPACE}
  environment:
    name: production
    url: https://${DOMAIN_NAME}/ui   
  when: manual
  only:
  - master
